{"ast":null,"code":"import { create } from \"zustand\";\nimport axios from \"axios\";\nconst AdminOperations = create(_c = set => ({\n  admins: null,\n  createForm: {\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    password: \"\",\n    type: \"\"\n  },\n  updateForm: {\n    _id: null,\n    title: \"\",\n    body: \"\"\n  },\n  fetchNotes: async () => {\n    // Fetch the notes\n    const res = await axios.get(\"http://localhost:4000/notes\"); // Set to state\n\n    set({\n      admins: res.data.notes\n    });\n  },\n  updateCreateFormField: e => {\n    const {\n      name,\n      value\n    } = e.target;\n    set(state => {\n      return {\n        createForm: { ...state.createForm,\n          [name]: value\n        }\n      };\n    });\n  },\n  createNote: async e => {\n    e.preventDefault();\n    const {\n      createForm,\n      notes\n    } = AdminOperations.getState();\n    const res = await axios.post(\"http://localhost:4000/api/v1/registerAdmin\", createForm);\n    set({\n      notes: [...notes, res.data.note],\n      createForm: {\n        title: \"\",\n        body: \"\"\n      }\n    });\n  },\n  deleteNote: async _id => {\n    // Delete the note\n    const res = await axios.delete(`http://localhost:4000/api/v1/admins/${_id}`);\n    const {\n      notes\n    } = AdminOperations.getState(); // Update state\n\n    const newNotes = notes.filter(note => {\n      return note._id !== _id;\n    });\n    set({\n      notes: newNotes\n    });\n  },\n  handleUpdateFieldChange: e => {\n    const {\n      value,\n      name\n    } = e.target;\n    set(state => {\n      return {\n        updateForm: { ...state.updateForm,\n          [name]: value\n        }\n      };\n    });\n  },\n  toggleUpdate: _ref => {\n    let {\n      _id,\n      title,\n      body\n    } = _ref;\n    set({\n      updateForm: {\n        title,\n        body,\n        _id\n      }\n    });\n  },\n  updateNote: async e => {\n    e.preventDefault();\n    const {\n      updateForm: {\n        title,\n        body,\n        _id\n      },\n      notes\n    } = AdminOperations.getState(); // Send the update request\n\n    const res = await axios.put(`http://localhost:4000/api/v1/admins/${_id}`, {\n      title,\n      body\n    }); // Update state\n\n    const newNotes = [...notes];\n    const noteIndex = notes.findIndex(note => {\n      return note._id === _id;\n    });\n    newNotes[noteIndex] = res.data.note;\n    set({\n      notes: newNotes,\n      updateForm: {\n        _id: null,\n        title: \"\",\n        body: \"\"\n      }\n    });\n  }\n}));\n_c2 = AdminOperations;\nexport default AdminOperations;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AdminOperations$create\");\n$RefreshReg$(_c2, \"AdminOperations\");","map":{"version":3,"names":["create","axios","AdminOperations","set","admins","createForm","name","email","phone","password","type","updateForm","_id","title","body","fetchNotes","res","get","data","notes","updateCreateFormField","e","value","target","state","createNote","preventDefault","getState","post","note","deleteNote","delete","newNotes","filter","handleUpdateFieldChange","toggleUpdate","updateNote","put","noteIndex","findIndex"],"sources":["/Applications/Applier/Untitled/client/src/context/AdminOperations.js"],"sourcesContent":["import {create} from \"zustand\";\nimport axios from \"axios\";\n\nconst AdminOperations = create((set) => ({\n  admins: null,\n\n  createForm: {\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    password: \"\",\n    type: \"\",\n  },\n\n  updateForm: {\n    _id: null,\n    title: \"\",\n    body: \"\",\n  },\n\n  fetchNotes: async () => {\n    // Fetch the notes\n    const res = await axios.get(\"http://localhost:4000/notes\");\n\n    // Set to state\n    set({ admins: res.data.notes });\n  },\n\n  updateCreateFormField: (e) => {\n    const { name, value } = e.target;\n\n    set((state) => {\n      return {\n        createForm: {\n          ...state.createForm,\n          [name]: value,\n        },\n      };\n    });\n  },\n\n  createNote: async (e) => {\n    e.preventDefault();\n\n    const { createForm, notes } = AdminOperations.getState();\n    const res = await axios.post(\"http://localhost:4000/api/v1/registerAdmin\", createForm);\n\n    set({\n      notes: [...notes, res.data.note],\n      createForm: {\n        title: \"\",\n        body: \"\",\n      },\n    });\n  },\n\n  deleteNote: async (_id) => {\n    // Delete the note\n    const res = await axios.delete(`http://localhost:4000/api/v1/admins/${_id}`);\n    const { notes } = AdminOperations.getState();\n\n    // Update state\n    const newNotes = notes.filter((note) => {\n      return note._id !== _id;\n    });\n\n    set({ notes: newNotes });\n  },\n\n  handleUpdateFieldChange: (e) => {\n    const { value, name } = e.target;\n\n    set((state) => {\n      return {\n        updateForm: {\n          ...state.updateForm,\n          [name]: value,\n        },\n      };\n    });\n  },\n\n  toggleUpdate: ({ _id, title, body }) => {\n    set({\n      updateForm: {\n        title,\n        body,\n        _id,\n      },\n    });\n  },\n\n  updateNote: async (e) => {\n    e.preventDefault();\n\n    const {\n      updateForm: { title, body, _id },\n      notes,\n    } = AdminOperations.getState();\n\n    // Send the update request\n    const res = await axios.put(`http://localhost:4000/api/v1/admins/${_id}`, {\n      title,\n      body,\n    });\n\n    // Update state\n    const newNotes = [...notes];\n    const noteIndex = notes.findIndex((note) => {\n      return note._id === _id;\n    });\n    newNotes[noteIndex] = res.data.note;\n\n    set({\n      notes: newNotes,\n      updateForm: {\n        _id: null,\n        title: \"\",\n        body: \"\",\n      },\n    });\n  },\n}));\n\nexport default AdminOperations;"],"mappings":"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"},"metadata":{},"sourceType":"module"}