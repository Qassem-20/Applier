{"ast":null,"code":"import { create } from \"zustand\";\nimport axios from \"axios\";\nconst CompanyStore = create(_c = set => ({\n  companies: null,\n  company: null,\n  fetchCompanyProfile: async () => {\n    try {\n      const response = await axios.get(\"/api/v1/companyProfile\", {\n        withCredentials: true\n      });\n      set({\n        company: response.data.company\n      });\n    } catch (error) {\n      console.error(error); // TODO: Handle errors\n    }\n  },\n  fetchCompany: async _id => {\n    try {\n      const res = await axios.get(`/api/v1/companies/${_id}`, {\n        withCredentials: true\n      });\n      set({\n        company: res.data.companies\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  },\n  // searchCompanies:async(e) => {\n  //   e.preventDefault();\n  //   const res = await axios.get(\"/api/v1/companies\");\n  // },\n  fetchCompanies: async () => {\n    // Fetch the companies\n    const res = await axios.get(\"/api/v1/companies\", {\n      withCredentials: true\n    }); // Set to state\n\n    set({\n      companies: res.data.companies\n    });\n  },\n  deleteCompany: async _id => {\n    await axios.delete(\"/api/v1/companies/\" + _id, {\n      withCredentials: true\n    });\n    const {\n      companies\n    } = CompanyStore.getState(); //update page;\n\n    const newCompanies = [...companies].filter(company => {\n      return company._id !== _id;\n    });\n    set({\n      companies: newCompanies\n    });\n  },\n  updateProfile: {\n    _id: null,\n    organization_name: \"\",\n    register_number: \"\",\n    organization_phone: \"\",\n    organization_website: \"\",\n    organization_bio: \"\",\n    supervisor_name: \"\",\n    country: \"\",\n    city: \"\",\n    phone: \"\"\n  },\n  toggleUpdate: _ref => {\n    let {\n      _id,\n      organization_name,\n      register_number,\n      organization_phone,\n      organization_website,\n      organization_bio,\n      supervisor_name,\n      country,\n      city,\n      phone\n    } = _ref;\n    set({\n      updateProfile: {\n        organization_name,\n        register_number,\n        organization_phone,\n        organization_website,\n        organization_bio,\n        supervisor_name,\n        country,\n        city,\n        phone,\n        _id\n      }\n    });\n  },\n  updateProfileCompany: async () => {\n    const {\n      updateProfile: {\n        organization_name,\n        register_number,\n        organization_phone,\n        organization_website,\n        organization_bio,\n        supervisor_name,\n        country,\n        city,\n        phone,\n        _id\n      }\n    } = CompanyStore.getState(); // Send the update request\n\n    await axios.put(`/api/v1/companies/${_id}`, {\n      organization_name,\n      register_number,\n      organization_phone,\n      organization_website,\n      organization_bio,\n      supervisor_name,\n      country,\n      city,\n      phone\n    }, {\n      withCredentials: true\n    });\n    set({\n      updateProfile: {\n        _id: null,\n        organization_name: \"\",\n        register_number: \"\",\n        organization_phone: \"\",\n        organization_website: \"\",\n        organization_bio: \"\",\n        supervisor_name: \"\",\n        country: \"\",\n        city: \"\",\n        phone: \"\"\n      }\n    });\n  },\n  handleUpdate: async e => {\n    const {\n      name,\n      value\n    } = e.target;\n    set(state => {\n      return {\n        updateProfile: { ...state.updateProfile,\n          [name]: value\n        }\n      };\n    });\n  },\n  values: {\n    organization_name: \"\",\n    register_number: \"\",\n    organization_website: \"\",\n    organization_bio: \"\",\n    supervisor_name: \"\",\n    password: \"\",\n    email: \"\",\n    phone: \"\",\n    country: \"\",\n    city: \"\"\n  },\n  registerCompany: async () => {\n    const {\n      values\n    } = CompanyStore.getState(); // add company\n\n    await axios.post(\"/api/v1/registerCompany\", values, {\n      withCredentials: true\n    });\n    set({\n      values: {\n        organization_name: \"\",\n        register_number: \"\",\n        organization_website: \"\",\n        organization_bio: \"\",\n        supervisor_name: \"\",\n        password: \"\",\n        email: \"\",\n        phone: \"\",\n        country: \"\",\n        city: \"\"\n      }\n    });\n  },\n  handleChange: async e => {\n    const {\n      name,\n      value\n    } = e.target;\n    set(state => {\n      return {\n        values: { ...state.values,\n          [name]: value\n        }\n      };\n    });\n  },\n  //login\n  loggedIn: null,\n  loginFormCompany: {\n    email: \"\",\n    password: \"\"\n  },\n  handleChangeLogin: async e => {\n    const {\n      name,\n      value\n    } = e.target;\n    set(state => {\n      return {\n        loginFormCompany: { ...state.loginFormCompany,\n          [name]: value\n        }\n      };\n    });\n  },\n  loginCompany: async () => {\n    const {\n      loginFormCompany\n    } = CompanyStore.getState();\n    await axios.post(\"/api/v1/loginCompany\", loginFormCompany, {\n      withCredentials: true\n    });\n    set({\n      loggedIn: true\n    });\n  },\n  checkAuth: async () => {\n    try {\n      await axios.get(\"/api/v1/checkAuthCompany\", {\n        withCredentials: true\n      });\n      set({\n        loggedIn: true\n      });\n    } catch (err) {\n      set({\n        loggedIn: false\n      });\n    }\n  },\n  logout: async () => {\n    await axios.get(\"/api/v1/logoutCompany\", {\n      withCredentials: true\n    });\n    set({\n      loggedIn: false\n    });\n  },\n  isLoading: false,\n  isActive: true,\n  checkStatueCompany: async () => {\n    try {\n      await axios.get(\"/api/v1/checkStatueCompany\", {\n        withCredentials: true\n      });\n      set({\n        isActive: true\n      });\n    } catch (err) {\n      set({\n        isActive: false\n      });\n    }\n  }\n}));\n_c2 = CompanyStore;\nexport default CompanyStore;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CompanyStore$create\");\n$RefreshReg$(_c2, \"CompanyStore\");","map":{"version":3,"names":["create","axios","CompanyStore","set","companies","company","fetchCompanyProfile","response","get","withCredentials","data","error","console","fetchCompany","_id","res","fetchCompanies","deleteCompany","delete","getState","newCompanies","filter","updateProfile","organization_name","register_number","organization_phone","organization_website","organization_bio","supervisor_name","country","city","phone","toggleUpdate","updateProfileCompany","put","handleUpdate","e","name","value","target","state","values","password","email","registerCompany","post","handleChange","loggedIn","loginFormCompany","handleChangeLogin","loginCompany","checkAuth","err","logout","isLoading","isActive","checkStatueCompany"],"sources":["/Applications/Applier/Applier/client/src/stores/CompanyStore.js"],"sourcesContent":["import { create } from \"zustand\";\nimport axios from \"axios\";\n\nconst CompanyStore = create((set) => ({\n  companies: null,\n  company: null,\n\n  fetchCompanyProfile: async () => {\n    try {\n      const response = await axios.get(\"/api/v1/companyProfile\", {\n        withCredentials: true,\n      });\n      set({ company: response.data.company });\n    } catch (error) {\n      console.error(error);\n      // TODO: Handle errors\n    }\n  },\n  fetchCompany: async (_id) => {\n    try {\n      const res = await axios.get(`/api/v1/companies/${_id}`, {\n        withCredentials: true,\n      });\n      set({ company: res.data.companies });\n    } catch (error) {\n      console.error(error);\n    }\n  },\n\n  // searchCompanies:async(e) => {\n  //   e.preventDefault();\n  //   const res = await axios.get(\"/api/v1/companies\");\n  // },\n\n  fetchCompanies: async () => {\n    // Fetch the companies\n    const res = await axios.get(\"/api/v1/companies\", {\n      withCredentials: true,\n    });\n    // Set to state\n    set({ companies: res.data.companies });\n  },\n\n  deleteCompany: async (_id) => {\n    await axios.delete(\"/api/v1/companies/\" + _id, {\n      withCredentials: true,\n    });\n\n    const { companies } = CompanyStore.getState();\n\n    //update page;\n    const newCompanies = [...companies].filter((company) => {\n      return company._id !== _id;\n    });\n    set({ companies: newCompanies });\n  },\n\n  updateProfile: {\n    _id: null,\n    organization_name: \"\",\n    register_number: \"\",\n    organization_phone: \"\",\n    organization_website: \"\",\n    organization_bio: \"\",\n    supervisor_name: \"\",\n    country: \"\",\n    city: \"\",\n    phone: \"\",\n  },\n  toggleUpdate: ({\n    _id,\n    organization_name,\n    register_number,\n    organization_phone,\n    organization_website,\n    organization_bio,\n    supervisor_name,\n    country,\n    city,\n    phone,\n  }) => {\n    set({\n      updateProfile: {\n        organization_name,\n        register_number,\n        organization_phone,\n        organization_website,\n        organization_bio,\n        supervisor_name,\n        country,\n        city,\n        phone,\n        _id,\n      },\n    });\n  },\n  updateProfileCompany: async () => {\n    const {\n      updateProfile: {\n        organization_name,\n        register_number,\n        organization_phone,\n        organization_website,\n        organization_bio,\n        supervisor_name,\n        country,\n        city,\n        phone,\n        _id,\n      },\n    } = CompanyStore.getState();\n\n    // Send the update request\n    await axios.put(\n      `/api/v1/companies/${_id}`,\n      {\n        organization_name,\n        register_number,\n        organization_phone,\n        organization_website,\n        organization_bio,\n        supervisor_name,\n        country,\n        city,\n        phone,\n      },\n      { withCredentials: true }\n    );\n\n    set({\n      updateProfile: {\n        _id: null,\n        organization_name: \"\",\n        register_number: \"\",\n        organization_phone: \"\",\n        organization_website: \"\",\n        organization_bio: \"\",\n        supervisor_name: \"\",\n        country: \"\",\n        city: \"\",\n        phone: \"\",\n      },\n    });\n  },\n  handleUpdate: async (e) => {\n    const { name, value } = e.target;\n\n    set((state) => {\n      return {\n        updateProfile: {\n          ...state.updateProfile,\n          [name]: value,\n        },\n      };\n    });\n  },\n  values: {\n    organization_name: \"\",\n    register_number: \"\",\n    organization_website: \"\",\n    organization_bio: \"\",\n    supervisor_name: \"\",\n    password: \"\",\n    email: \"\",\n    phone: \"\",\n    country: \"\",\n    city: \"\",\n  },\n\n  registerCompany: async () => {\n    const { values } = CompanyStore.getState();\n\n    // add company\n    await axios.post(\"/api/v1/registerCompany\", values, {\n      withCredentials: true,\n    });\n    set({\n      values: {\n        organization_name: \"\",\n        register_number: \"\",\n        organization_website: \"\",\n        organization_bio: \"\",\n        supervisor_name: \"\",\n        password: \"\",\n        email: \"\",\n        phone: \"\",\n        country: \"\",\n        city: \"\",\n      },\n    });\n  },\n\n  handleChange: async (e) => {\n    const { name, value } = e.target;\n\n    set((state) => {\n      return {\n        values: {\n          ...state.values,\n          [name]: value,\n        },\n      };\n    });\n  },\n\n  //login\n  loggedIn: null,\n  loginFormCompany: {\n    email: \"\",\n    password: \"\",\n  },\n  handleChangeLogin: async (e) => {\n    const { name, value } = e.target;\n\n    set((state) => {\n      return {\n        loginFormCompany: {\n          ...state.loginFormCompany,\n          [name]: value,\n        },\n      };\n    });\n  },\n  loginCompany: async () => {\n    const { loginFormCompany } = CompanyStore.getState();\n\n    await axios.post(\"/api/v1/loginCompany\", loginFormCompany, {\n      withCredentials: true,\n    });\n\n    set({ loggedIn: true });\n  },\n  checkAuth: async () => {\n    try {\n      await axios.get(\"/api/v1/checkAuthCompany\", {\n        withCredentials: true,\n      });\n      set({ loggedIn: true });\n    } catch (err) {\n      set({ loggedIn: false });\n    }\n  },\n  logout: async () => {\n    await axios.get(\"/api/v1/logoutCompany\", {\n      withCredentials: true,\n    });\n    set({ loggedIn: false });\n  },\n  isLoading: false,\n  isActive: true,\n  checkStatueCompany: async () => {\n    try {\n      await axios.get(\"/api/v1/checkStatueCompany\", {\n        withCredentials: true,\n      });\n      set({ isActive: true });\n    } catch (err) {\n      set({ isActive: false });\n    }\n  },\n}));\n\nexport default CompanyStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}