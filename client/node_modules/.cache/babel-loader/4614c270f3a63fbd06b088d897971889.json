{"ast":null,"code":"import { create } from \"zustand\";\nimport axios from \"axios\";\nconst AdminsStore = create(_c = set => ({\n  admins: null,\n  fetchAdmins: async () => {\n    // Fetch the admins\n    const res = await axios.get(\"/api/v1/admins\", {\n      withCredentials: true\n    }); // Set to state\n\n    set({\n      admins: res.data.admins\n    });\n  },\n  deleteAdmin: async _id => {\n    await axios.delete(\"/api/v1/admins/\" + _id, {\n      withCredentials: true\n    });\n    const {\n      admins\n    } = AdminsStore.getState(); //update page;\n\n    const newAdmins = [...admins].filter(admin => {\n      return admin._id !== _id;\n    });\n    set({\n      admins: newAdmins\n    });\n  },\n  updateType: {\n    _id: \"\",\n    type: \"\"\n  },\n  handleUpdateFieldChange: e => {\n    const {\n      value,\n      name\n    } = e.target;\n    set(state => {\n      return {\n        updateType: { ...state.updateType,\n          [name]: value\n        }\n      };\n    });\n  },\n  toggleUpdate: _ref => {\n    let {\n      _id,\n      type\n    } = _ref;\n    set({\n      updateType: {\n        _id,\n        type\n      }\n    });\n  },\n  updateAdminType: async e => {\n    e.preventDefault();\n    const {\n      updateType: {\n        type,\n        _id\n      },\n      admins\n    } = AdminsStore.getState(); // Send the update request\n\n    const res = await axios.put(`/api/v1/admins/${_id}`, {\n      type\n    }, {\n      withCredentials: true\n    }); // Update state\n\n    const newAdmins = [...admins];\n    const adminIndex = admins.findIndex(admin => {\n      return admin._id === _id;\n    });\n    newAdmins[adminIndex] = res.data.admin;\n    set({\n      admins: newAdmins,\n      updateType: {\n        _id: null,\n        type: \"\"\n      }\n    });\n  },\n  values: {\n    name: \"\",\n    email: \"\",\n    type: \"\",\n    phone: \"\",\n    password: \"\"\n  },\n  registerAdmin: async () => {\n    const {\n      values\n    } = AdminsStore.getState(); // add admin\n\n    await axios.post(\"/api/v1/registerAdmin\", values, {\n      withCredentials: true\n    });\n    set({\n      values: {\n        name: \"\",\n        email: \"\",\n        type: \"\",\n        phone: \"\",\n        password: \"\"\n      }\n    });\n  },\n  handleChange: async e => {\n    const {\n      name,\n      value\n    } = e.target;\n    set(state => {\n      return {\n        values: { ...state.values,\n          [name]: value\n        }\n      };\n    });\n  },\n  //login\n  loggedIn: null,\n  loginForm: {\n    email: \"\",\n    password: \"\"\n  },\n  handleChangeLogin: async e => {\n    const {\n      name,\n      value\n    } = e.target;\n    set(state => {\n      return {\n        loginForm: { ...state.loginForm,\n          [name]: value\n        }\n      };\n    });\n  },\n  loginAdmin: async () => {\n    const {\n      loginForm\n    } = AdminsStore.getState();\n    await axios.post(\"/api/v1/loginAdmin\", loginForm, {\n      withCredentials: true\n    });\n    set({\n      loggedIn: true\n    });\n  },\n  checkAuth: async () => {\n    try {\n      await axios.get(\"/api/v1/checkAuthAdmin\", {\n        withCredentials: true\n      });\n      set({\n        loggedIn: true\n      });\n    } catch (err) {\n      set({\n        loggedIn: false\n      });\n    }\n  },\n  logout: async () => {\n    await axios.get(\"/api/v1/logoutAdmin\", {\n      withCredentials: true\n    });\n    set({\n      loggedIn: false\n    });\n  },\n  isLoading: false,\n  isType: true,\n  checkStatueAdmin: async () => {\n    try {\n      await axios.get(\"/api/v1/checkStatueAdmin\", {\n        withCredentials: true\n      });\n      set({\n        isType: true\n      });\n    } catch (err) {\n      set({\n        isType: false\n      });\n    }\n  }\n}));\n_c2 = AdminsStore;\nexport default AdminsStore;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AdminsStore$create\");\n$RefreshReg$(_c2, \"AdminsStore\");","map":{"version":3,"names":["create","axios","AdminsStore","set","admins","fetchAdmins","res","get","withCredentials","data","deleteAdmin","_id","delete","getState","newAdmins","filter","admin","updateType","type","handleUpdateFieldChange","e","value","name","target","state","toggleUpdate","updateAdminType","preventDefault","put","adminIndex","findIndex","values","email","phone","password","registerAdmin","post","handleChange","loggedIn","loginForm","handleChangeLogin","loginAdmin","checkAuth","err","logout","isLoading","isType","checkStatueAdmin"],"sources":["/Applications/Applier/Applier/client/src/stores/AdminsStore.js"],"sourcesContent":["import { create } from \"zustand\";\nimport axios from \"axios\";\n\nconst AdminsStore = create((set) => ({\n  admins: null,\n\n  fetchAdmins: async () => {\n    // Fetch the admins\n    const res = await axios.get(\"/api/v1/admins\", {\n      withCredentials: true,\n    });\n    // Set to state\n    set({ admins: res.data.admins });\n  },\n\n  deleteAdmin: async (_id) => {\n    await axios.delete(\"/api/v1/admins/\" + _id, {\n      withCredentials: true,\n    });\n\n    const { admins } = AdminsStore.getState();\n\n    //update page;\n    const newAdmins = [...admins].filter((admin) => {\n      return admin._id !== _id;\n    });\n    set({ admins: newAdmins });\n  },\n\n  updateType: {\n    _id: \"\",\n    type: \"\",\n  },\n  handleUpdateFieldChange: (e) => {\n    const { value, name } = e.target;\n\n    set((state) => {\n      return {\n        updateType: {\n          ...state.updateType,\n          [name]: value,\n        },\n      };\n    });\n  },\n\n  toggleUpdate: ({ _id, type }) => {\n    set({\n      updateType: {\n        _id,\n        type,\n      },\n    });\n  },\n\n  updateAdminType: async (e) => {\n    e.preventDefault();\n    const {\n      updateType: { type, _id },\n      admins,\n    } = AdminsStore.getState();\n\n    // Send the update request\n    const res = await axios.put(\n      `/api/v1/admins/${_id}`,\n      {\n        type,\n      },\n      { withCredentials: true }\n    );\n\n    // Update state\n    const newAdmins = [...admins];\n    const adminIndex = admins.findIndex((admin) => {\n      return admin._id === _id;\n    });\n    newAdmins[adminIndex] = res.data.admin;\n\n    set({\n      admins: newAdmins,\n      updateType: {\n        _id: null,\n        type: \"\",\n      },\n    });\n  },\n\n  values: {\n    name: \"\",\n    email: \"\",\n    type: \"\",\n    phone: \"\",\n    password: \"\",\n  },\n\n  registerAdmin: async () => {\n    const { values } = AdminsStore.getState();\n\n    // add admin\n    await axios.post(\"/api/v1/registerAdmin\", values, {\n      withCredentials: true,\n    });\n    set({\n      values: {\n        name: \"\",\n        email: \"\",\n        type: \"\",\n        phone: \"\",\n        password: \"\",\n      },\n    });\n  },\n\n  handleChange: async (e) => {\n    const { name, value } = e.target;\n\n    set((state) => {\n      return {\n        values: {\n          ...state.values,\n          [name]: value,\n        },\n      };\n    });\n  },\n\n  //login\n  loggedIn: null,\n  loginForm: {\n    email: \"\",\n    password: \"\",\n  },\n  handleChangeLogin: async (e) => {\n    const { name, value } = e.target;\n\n    set((state) => {\n      return {\n        loginForm: {\n          ...state.loginForm,\n          [name]: value,\n        },\n      };\n    });\n  },\n  loginAdmin: async () => {\n    const { loginForm } = AdminsStore.getState();\n\n    await axios.post(\"/api/v1/loginAdmin\", loginForm, {\n      withCredentials: true,\n    });\n\n    set({ loggedIn: true });\n  },\n  checkAuth: async () => {\n    try {\n      await axios.get(\"/api/v1/checkAuthAdmin\", {\n        withCredentials: true,\n      });\n      set({ loggedIn: true });\n    } catch (err) {\n      set({ loggedIn: false });\n    }\n  },\n  logout: async () => {\n    await axios.get(\"/api/v1/logoutAdmin\", {\n      withCredentials: true,\n    });\n    set({ loggedIn: false });\n  },\n  isLoading: false,\n  isType: true,\n  checkStatueAdmin: async () => {\n    try {\n      await axios.get(\"/api/v1/checkStatueAdmin\", {\n        withCredentials: true,\n      });\n      set({ isType: true });\n    } catch (err) {\n      set({ isType: false });\n    }\n  },\n}));\n\nexport default AdminsStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}