{"ast":null,"code":"var _jsxFileName = \"/Applications/Applier/Applier/client/src/components/applierComponents/applierSelect.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Row, Container } from \"react-bootstrap\";\nimport \"react-bootstrap\";\nimport \"../../assets/css/signUpSignIn.css\";\nimport \"../../assets/css/custom.css\";\nimport { FaTimes } from \"react-icons/fa\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Checkbox = props => {\n  _s();\n\n  const [selectedValue, setSelectedValue] = useState([]); // the new state is updated with keeping a copy of the old state\n\n  const handleNewValue = value => {\n    setSelectedValue(prev => [...prev, value]);\n  };\n\n  const handleSkillSelected = event => {\n    const {\n      options\n    } = event.target;\n    const selected = options[options.selectedIndex].value;\n\n    if (!selectedValue.includes(selected)) {\n      handleNewValue(selected);\n    } else {\n      let index = selectedValue.indexOf(selected);\n      const updatedValues = [...selectedValue];\n      updatedValues.splice(index, 1);\n      setSelectedValue(updatedValues);\n    }\n  };\n\n  const reomveSelected = value => {\n    const index = selectedValue.indexOf(value);\n\n    if (index > -1) {\n      const updatedValues = [...selectedValue];\n      updatedValues.splice(index, 1);\n      setSelectedValue(updatedValues);\n    }\n  };\n\n  const {\n    name,\n    label,\n    options,\n    required\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"labelStyling\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: selectedValue.map(selected => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"selceted\",\n          children: [selected, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"reomveSelection\",\n            onClick: () => reomveSelected(selected),\n            children: /*#__PURE__*/_jsxDEV(FaTimes, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this)]\n        }, selected.index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"inputStyling mb-3\",\n      name: name,\n      onChange: handleSkillSelected,\n      required: required,\n      children: options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option.value,\n        children: option.label\n      }, option.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkbox, \"CwegKhrv7C1L2PY7F1ew08VZxPY=\");\n\n_c = Checkbox;\nexport default Checkbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkbox\");","map":{"version":3,"names":["React","useState","Row","Container","FaTimes","Checkbox","props","selectedValue","setSelectedValue","handleNewValue","value","prev","handleSkillSelected","event","options","target","selected","selectedIndex","includes","index","indexOf","updatedValues","splice","reomveSelected","name","label","required","map","option"],"sources":["/Applications/Applier/Applier/client/src/components/applierComponents/applierSelect.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Row, Container } from \"react-bootstrap\";\nimport \"react-bootstrap\";\nimport \"../../assets/css/signUpSignIn.css\";\nimport \"../../assets/css/custom.css\";\nimport { FaTimes } from \"react-icons/fa\";\n\nconst Checkbox = (props) => {\n  const [selectedValue, setSelectedValue] = useState([]);\n\n  // the new state is updated with keeping a copy of the old state\n  const handleNewValue = (value) => {\n    setSelectedValue((prev) => [...prev, value]);\n  };\n\n  const handleSkillSelected = (event) => {\n    const { options } = event.target;\n    const selected = options[options.selectedIndex].value;\n\n    if (!selectedValue.includes(selected)) {\n      handleNewValue(selected);\n    } else {\n      let index = selectedValue.indexOf(selected);\n      const updatedValues = [...selectedValue];\n      updatedValues.splice(index, 1);\n      setSelectedValue(updatedValues);\n    }\n  };\n\n  const reomveSelected = (value) => {\n    const index = selectedValue.indexOf(value);\n    if (index > -1) {\n      const updatedValues = [...selectedValue];\n      updatedValues.splice(index, 1);\n      setSelectedValue(updatedValues);\n    }\n  };\n\n  const { name, label, options, required } = props;\n\n  return (\n    <div>\n      <label className=\"labelStyling\">{label}</label>\n      <Container>\n        <Row>\n          {selectedValue.map((selected) => (\n            <div className=\"selceted\" key={selected.index}>\n              {selected}\n              <div\n                className=\"reomveSelection\"\n                onClick={() => reomveSelected(selected)}\n              >\n                <FaTimes />\n              </div>\n            </div>\n          ))}\n        </Row>\n      </Container>\n      <select\n        className=\"inputStyling mb-3\"\n        name={name}\n        onChange={handleSkillSelected}\n        required={required}\n      >\n        {options.map((option) => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n};\n\nexport default Checkbox;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,GAAT,EAAcC,SAAd,QAA+B,iBAA/B;AACA,OAAO,iBAAP;AACA,OAAO,mCAAP;AACA,OAAO,6BAAP;AACA,SAASC,OAAT,QAAwB,gBAAxB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EAAA;;EAC1B,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCP,QAAQ,CAAC,EAAD,CAAlD,CAD0B,CAG1B;;EACA,MAAMQ,cAAc,GAAIC,KAAD,IAAW;IAChCF,gBAAgB,CAAEG,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUD,KAAV,CAAX,CAAhB;EACD,CAFD;;EAIA,MAAME,mBAAmB,GAAIC,KAAD,IAAW;IACrC,MAAM;MAAEC;IAAF,IAAcD,KAAK,CAACE,MAA1B;IACA,MAAMC,QAAQ,GAAGF,OAAO,CAACA,OAAO,CAACG,aAAT,CAAP,CAA+BP,KAAhD;;IAEA,IAAI,CAACH,aAAa,CAACW,QAAd,CAAuBF,QAAvB,CAAL,EAAuC;MACrCP,cAAc,CAACO,QAAD,CAAd;IACD,CAFD,MAEO;MACL,IAAIG,KAAK,GAAGZ,aAAa,CAACa,OAAd,CAAsBJ,QAAtB,CAAZ;MACA,MAAMK,aAAa,GAAG,CAAC,GAAGd,aAAJ,CAAtB;MACAc,aAAa,CAACC,MAAd,CAAqBH,KAArB,EAA4B,CAA5B;MACAX,gBAAgB,CAACa,aAAD,CAAhB;IACD;EACF,CAZD;;EAcA,MAAME,cAAc,GAAIb,KAAD,IAAW;IAChC,MAAMS,KAAK,GAAGZ,aAAa,CAACa,OAAd,CAAsBV,KAAtB,CAAd;;IACA,IAAIS,KAAK,GAAG,CAAC,CAAb,EAAgB;MACd,MAAME,aAAa,GAAG,CAAC,GAAGd,aAAJ,CAAtB;MACAc,aAAa,CAACC,MAAd,CAAqBH,KAArB,EAA4B,CAA5B;MACAX,gBAAgB,CAACa,aAAD,CAAhB;IACD;EACF,CAPD;;EASA,MAAM;IAAEG,IAAF;IAAQC,KAAR;IAAeX,OAAf;IAAwBY;EAAxB,IAAqCpB,KAA3C;EAEA,oBACE;IAAA,wBACE;MAAO,SAAS,EAAC,cAAjB;MAAA,UAAiCmB;IAAjC;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,SAAD;MAAA,uBACE,QAAC,GAAD;QAAA,UACGlB,aAAa,CAACoB,GAAd,CAAmBX,QAAD,iBACjB;UAAK,SAAS,EAAC,UAAf;UAAA,WACGA,QADH,eAEE;YACE,SAAS,EAAC,iBADZ;YAEE,OAAO,EAAE,MAAMO,cAAc,CAACP,QAAD,CAF/B;YAAA,uBAIE,QAAC,OAAD;cAAA;cAAA;cAAA;YAAA;UAJF;YAAA;YAAA;YAAA;UAAA,QAFF;QAAA,GAA+BA,QAAQ,CAACG,KAAxC;UAAA;UAAA;UAAA;QAAA,QADD;MADH;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAFF,eAiBE;MACE,SAAS,EAAC,mBADZ;MAEE,IAAI,EAAEK,IAFR;MAGE,QAAQ,EAAEZ,mBAHZ;MAIE,QAAQ,EAAEc,QAJZ;MAAA,UAMGZ,OAAO,CAACa,GAAR,CAAaC,MAAD,iBACX;QAA2B,KAAK,EAAEA,MAAM,CAAClB,KAAzC;QAAA,UACGkB,MAAM,CAACH;MADV,GAAaG,MAAM,CAAClB,KAApB;QAAA;QAAA;QAAA;MAAA,QADD;IANH;MAAA;MAAA;MAAA;IAAA,QAjBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAgCD,CAjED;;GAAML,Q;;KAAAA,Q;AAmEN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}