{"ast":null,"code":"import { create } from \"zustand\";\nimport axios from \"axios\";\nconst ReviewStore = create(_c = set => ({\n  reviews: null,\n  fetchReviews: async () => {\n    // Fetch the reviews\n    const res = await axios.get(\"/api/v1/reviews\", {\n      withCredentials: true\n    }); // Set to state\n\n    set({\n      reviews: res.data.reviews\n    });\n  },\n  fetchReviewsCompany: async _id => {\n    // Fetch the reviews\n    const res = await axios.get(\"/api/v1/reviewsCompany/\" + _id, {\n      withCredentials: true\n    }); // Set to state\n\n    set({\n      reviews: res.data.reviews\n    });\n  },\n  fetchReviewsMedical: async () => {\n    // Fetch the reviews\n    const res = await axios.get(\"/api/v1/reviewsMedical\", {\n      withCredentials: true\n    }); // Set to state\n\n    set({\n      reviews: res.data.reviews\n    });\n  },\n  deleteReview: async _id => {\n    await axios.delete(\"/api/v1/reviews/\" + _id, {\n      withCredentials: true\n    });\n    const {\n      reviews\n    } = ReviewStore.getState(); //update page;\n\n    const newReviews = [...reviews].filter(review => {\n      return review._id !== _id;\n    });\n    set({\n      reviews: newReviews\n    });\n  },\n  updateStatue: {\n    _id: null,\n    statue: \"\"\n  },\n  updateReview: async e => {\n    e.preventDefault();\n    const {\n      updateStatue: {\n        statue,\n        _id\n      },\n      reviews\n    } = ReviewStore.getState(); // Send the update request\n\n    const res = await axios.put(`/api/v1/admins/hideReview/${_id}`, {\n      statue\n    }, {\n      withCredentials: true\n    }); // Update state\n\n    const newReviews = [...reviews];\n    const reviewIndex = reviews.findIndex(review => {\n      return review._id === _id;\n    });\n    newReviews[reviewIndex] = res.data.review;\n    set({\n      reviews: newReviews,\n      updateType: {\n        _id: null,\n        statue: \"\"\n      }\n    });\n  },\n  values: {\n    rate: \"\",\n    description: \"\",\n    company: \"\",\n    medicalStudent: \"\"\n  },\n  registerReviewCompany: async () => {\n    const {\n      values\n    } = ReviewStore.getState(); // add review\n\n    await axios.post(\"/api/v1/reviews/registerReviewCompany\", values, {\n      withCredentials: true\n    });\n    set({\n      values: {\n        rate: \"\",\n        description: \"\",\n        company: \"\"\n      }\n    });\n  },\n  registerReviewMedical: async () => {\n    const {\n      values\n    } = ReviewStore.getState(); // add review\n\n    await axios.post(\"/api/v1/reviews/registerReviewMedical\", values, {\n      withCredentials: true\n    });\n    set({\n      values: {\n        rate: \"\",\n        description: \"\",\n        medicalStudent: \"\"\n      }\n    });\n  },\n  handleChange: async e => {\n    const {\n      name,\n      value\n    } = e.target;\n    set(state => {\n      return {\n        values: { ...state.values,\n          [name]: value\n        }\n      };\n    });\n  }\n}));\n_c2 = ReviewStore;\nexport default ReviewStore;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ReviewStore$create\");\n$RefreshReg$(_c2, \"ReviewStore\");","map":{"version":3,"names":["create","axios","ReviewStore","set","reviews","fetchReviews","res","get","withCredentials","data","fetchReviewsCompany","_id","fetchReviewsMedical","deleteReview","delete","getState","newReviews","filter","review","updateStatue","statue","updateReview","e","preventDefault","put","reviewIndex","findIndex","updateType","values","rate","description","company","medicalStudent","registerReviewCompany","post","registerReviewMedical","handleChange","name","value","target","state"],"sources":["/Applications/Applier/Applier/client/src/stores/ReviewStore.js"],"sourcesContent":["import { create } from \"zustand\";\nimport axios from \"axios\";\n\nconst ReviewStore = create((set) => ({\n  reviews: null,\n\n  fetchReviews: async () => {\n    // Fetch the reviews\n    const res = await axios.get(\"/api/v1/reviews\", { withCredentials: true });\n    // Set to state\n    set({ reviews: res.data.reviews });\n  },\n\n  fetchReviewsCompany: async (_id) => {\n    // Fetch the reviews\n    const res = await axios.get(\"/api/v1/reviewsCompany/\" + _id, {\n      withCredentials: true,\n    });\n    // Set to state\n    set({ reviews: res.data.reviews });\n  },\n  fetchReviewsMedical: async () => {\n    // Fetch the reviews\n    const res = await axios.get(\"/api/v1/reviewsMedical\", {\n      withCredentials: true,\n    });\n    // Set to state\n    set({ reviews: res.data.reviews });\n  },\n\n  deleteReview: async (_id) => {\n    await axios.delete(\"/api/v1/reviews/\" + _id, {\n      withCredentials: true,\n    });\n\n    const { reviews } = ReviewStore.getState();\n\n    //update page;\n    const newReviews = [...reviews].filter((review) => {\n      return review._id !== _id;\n    });\n    set({ reviews: newReviews });\n  },\n\n  updateStatue: {\n    _id: null,\n    statue: \"\",\n  },\n\n  updateReview: async (e) => {\n    e.preventDefault();\n\n    const {\n      updateStatue: { statue, _id },\n      reviews,\n    } = ReviewStore.getState();\n\n    // Send the update request\n    const res = await axios.put(\n      `/api/v1/admins/hideReview/${_id}`,\n      {\n        statue,\n      },\n      { withCredentials: true }\n    );\n\n    // Update state\n    const newReviews = [...reviews];\n    const reviewIndex = reviews.findIndex((review) => {\n      return review._id === _id;\n    });\n    newReviews[reviewIndex] = res.data.review;\n\n    set({\n      reviews: newReviews,\n      updateType: {\n        _id: null,\n        statue: \"\",\n      },\n    });\n  },\n\n  values: {\n    rate: \"\",\n    description: \"\",\n    company: \"\",\n    medicalStudent: \"\",\n  },\n\n  registerReviewCompany: async () => {\n    const { values } = ReviewStore.getState();\n\n    // add review\n    await axios.post(\"/api/v1/reviews/registerReviewCompany\", values, {\n      withCredentials: true,\n    });\n    set({\n      values: {\n        rate: \"\",\n        description: \"\",\n        company: \"\",\n      },\n    });\n  },\n  registerReviewMedical: async () => {\n    const { values } = ReviewStore.getState();\n\n    // add review\n    await axios.post(\"/api/v1/reviews/registerReviewMedical\", values, {\n      withCredentials: true,\n    });\n    set({\n      values: {\n        rate: \"\",\n        description: \"\",\n        medicalStudent: \"\",\n      },\n    });\n  },\n\n  handleChange: async (e) => {\n    const { name, value } = e.target;\n\n    set((state) => {\n      return {\n        values: {\n          ...state.values,\n          [name]: value,\n        },\n      };\n    });\n  },\n}));\n\nexport default ReviewStore;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}